# 1. 드라이브 마운트
from google.colab import drive
drive.mount('/content/drive')

# 2. 필요한 라이브러리 import
import zipfile
import os

# 3. 압축 해제 함수
def unzip_file(zip_path, extract_to):
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_to)
    print(f"✅ 압축 해제 완료: {zip_path}")

# 4. 경로 설정
base_path = '/content/drive/MyDrive/062.반려동물 질병 진단을 위한 영상 데이터 (근골격계)'

# Training 라벨링 데이터 경로
train_label_folder = os.path.join(base_path, '01.데이터/Training/라벨링데이터')
train_label_extract_folder = os.path.join(base_path, '01.데이터/Training/라벨링데이터_extracted')

# Training 원천 데이터 경로
train_origin_folder = os.path.join(base_path, '01.데이터/Training/원천데이터')

# Validation 라벨링 데이터 경로
val_label_folder = os.path.join(base_path, '01.데이터/Validation/라벨링데이터')

# Validation 원천 데이터 경로
val_origin_folder = os.path.join(base_path, '01.데이터/Validation/원천데이터')

# 5. Training - 라벨링데이터 압축 해제
os.makedirs(train_label_extract_folder, exist_ok=True)
unzip_file(os.path.join(train_label_folder, 'TL1_CAT.zip'), train_label_extract_folder)
unzip_file(os.path.join(train_label_folder, 'TL2_DOG.zip'), train_label_extract_folder)

# 6. Training - 원천데이터 압축 해제
unzip_file(os.path.join(train_origin_folder, 'TS1_CAT.zip'), train_origin_folder)
unzip_file(os.path.join(train_origin_folder, 'TS2_DOG.zip'), train_origin_folder)

# 7. Validation - 라벨링데이터 압축 해제
unzip_file(os.path.join(val_label_folder, 'VL1_CAT.zip'), val_label_folder)
unzip_file(os.path.join(val_label_folder, 'VL2_DOG.zip'), val_label_folder)

# 8. Validation - 원천데이터 압축 해제
unzip_file(os.path.join(val_origin_folder, 'VS1_CAT.zip'), val_origin_folder)
unzip_file(os.path.join(val_origin_folder, 'VS2_DOG.zip'), val_origin_folder)




# 1. 필요한 라이브러리 import
import os
import json
from PIL import Image

# 2. 기본 경로 설정
base_path = '/content/drive/MyDrive/062.반려동물 질병 진단을 위한 영상 데이터 (근골격계)'

# 3. 경로 세팅
sets = {
    'train': {
        'json_folder': os.path.join(base_path, "01.데이터/Training/라벨링데이터_extracted"),  # ★ 압축 푼 라벨 경로 주의!
        'image_folder': os.path.join(base_path, "01.데이터/Training/원천데이터"),
        'output_folder': os.path.join(base_path, "01.데이터/Training/labels")
    },
    'val': {
        'json_folder': os.path.join(base_path, "01.데이터/Validation/라벨링데이터"),  # Validation은 별도 압축 안 했으면 원래 경로
        'image_folder': os.path.join(base_path, "01.데이터/Validation/원천데이터"),
        'output_folder': os.path.join(base_path, "01.데이터/Validation/labels")
    }
}

# 4. 지원하는 이미지 확장자
image_exts = ['.jpg', '.jpeg', '.png']

# 5. 변환 함수 정의
def convert_to_yolo(json_folder, image_folder, output_folder):
    os.makedirs(output_folder, exist_ok=True)

    for file in os.listdir(json_folder):
        if file.endswith('.json'):
            base_name = os.path.splitext(file)[0]
            json_path = os.path.join(json_folder, file)
            print(f"🚧 현재 처리 중인 JSON 파일: {json_path}")  # 추가된 코드

            # JSON 로드
            try:
                with open(json_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
            except json.JSONDecodeError as e:
                print(f"❌ JSON 디코드 에러 발생: {json_path} - {e}")
                continue  # 오류 발생 시 다음 파일로 건너뛰기

            # 이미지 찾기
            image_path = None
            for ext in image_exts:
                candidate = os.path.join(image_folder, base_name + ext)
                if os.path.exists(candidate):
                    image_path = candidate
                    break

            if not image_path:
                print(f"⚠️ 이미지 없음: {base_name}")
                continue

            # 이미지 크기 얻기
            with Image.open(image_path) as img:
                img_width, img_height = img.size

            # YOLO 포맷 만들기
            yolo_lines = []
            for ann in data.get("annotations", []):
                if ann.get("shape") == "Bounding Box":
                    (x1, y1), (x2, y2) = ann["points"]
                    cx = (x1 + x2) / 2 / img_width
                    cy = (y1 + y2) / 2 / img_height
                    w = abs(x2 - x1) / img_width
                    h = abs(y2 - y1) / img_height
                    yolo_lines.append(f"0 {cx:.6f} {cy:.6f} {w:.6f} {h:.6f}")

            # 저장
            out_path = os.path.join(output_folder, base_name + ".txt")
            with open(out_path, "w", encoding='utf-8') as f:
                f.write("\n".join(yolo_lines))

            print(f"✅ 변환 완료: {base_name}.txt")

# 6. 변환 실행
for phase, paths in sets.items():
    print(f"\n📂 처리 시작: {phase}")
    convert_to_yolo(paths['json_folder'], paths['image_folder'], paths['output_folder'])






# 1. train/val 이미지 경로 정리
def make_dataset_txt(image_folder, save_txt_path):
    # 지원하는 이미지 확장자
    image_exts = ['.jpg', '.jpeg', '.png']

    img_paths = []
    for file in os.listdir(image_folder):
        if any(file.endswith(ext) for ext in image_exts):
            full_path = os.path.join(image_folder, file)
            img_paths.append(full_path)

    img_paths.sort()  # (선택) 알파벳 순으로 정렬
    print(f"✅ 총 {len(img_paths)}개 파일 기록: {save_txt_path}")

    # txt로 저장
    with open(save_txt_path, 'w') as f:
        for path in img_paths:
            f.write(path + '\n')

# 2. 경로 설정
train_image_folder = '/content/drive/MyDrive/062.반려동물 질병 진단을 위한 영상 데이터 (근골격계)/01.데이터/Training/원천데이터'
val_image_folder = '/content/drive/MyDrive/062.반려동물 질병 진단을 위한 영상 데이터 (근골격계)/01.데이터/Validation/원천데이터'

# 저장할 txt 경로
train_txt_path = '/content/drive/MyDrive/062.반려동물 질병 진단을 위한 영상 데이터 (근골격계)/train.txt'
val_txt_path = '/content/drive/MyDrive/062.반려동물 질병 진단을 위한 영상 데이터 (근골격계)/val.txt'

# 3. 실행
make_dataset_txt(train_image_folder, train_txt_path)
make_dataset_txt(val_image_folder, val_txt_path)





import yaml

# 1. YAML 파일을 생성할 데이터 설정
yaml_data = {
    'train': {
        'image_folder': train_image_folder,
        'label_folder': '/content/drive/MyDrive/062.반려동물 질병 진단을 위한 영상 데이터 (근골격계)/01.데이터/Training/labels',
        'dataset_txt': train_txt_path
    },
    'val': {
        'image_folder': val_image_folder,
        'label_folder': '/content/drive/MyDrive/062.반려동물 질병 진단을 위한 영상 데이터 (근골격계)/01.데이터/Validation/labels',
        'dataset_txt': val_txt_path
    }
}

# 2. YAML 파일 경로 설정
yaml_file_path = '/content/drive/MyDrive/062.반려동물 질병 진단을 위한 영상 데이터 (근골격계)/dataset_config.yaml'

# 3. YAML 파일 생성
with open(yaml_file_path, 'w') as yaml_file:
    yaml.dump(yaml_data, yaml_file, default_flow_style=False, allow_unicode=True)

print(f"✅ YAML 파일 생성 완료: {yaml_file_path}")


import cv2
import numpy as np
from matplotlib import pyplot as plt

# 1. YOLO 모델 파일 경로
weights_path = '/path/to/yolov5/weights/file.pt'
config_path = '/path/to/yolov5/config/file.cfg'
class_names = ['class1', 'class2', 'class3']  # 다친 부위를 포함한 클래스 이름

# 2. YOLO 모델 로드 (PyTorch 모델 예시)
import torch

# YOLOv5 모델 로드 (PyTorch Hub 사용)
model = torch.hub.load('ultralytics/yolov5', 'custom', path=weights_path)

# 3. 이미지 로드
image_path = '/path/to/image.jpg'
image = cv2.imread(image_path)

# 4. YOLO 모델로 예측
results = model(image)

# 5. 결과에서 다친 부위 (예: 'injury' 클래스)를 찾고 이미지에 표시
# 예시: 특정 클래스 ID로 결과를 필터링
for result in results.xyxy[0]:  # 결과에서 bounding box
    x1, y1, x2, y2, conf, cls = result[:6]
    label = class_names[int(cls)]

    # 다친 부위로 인식된 경우 (예: 'injury' 클래스)
    if label == 'injury':  # 'injury'는 다친 부위에 해당하는 클래스
        # Bounding box 그리기
        color = (255, 0, 0)  # 빨간색 박스
        cv2.rectangle(image, (int(x1), int(y1)), (int(x2), int(y2)), color, 2)
        cv2.putText(image, label, (int(x1), int(y1)-10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, color, 2)

# 6. 결과 이미지 출력
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.show()









