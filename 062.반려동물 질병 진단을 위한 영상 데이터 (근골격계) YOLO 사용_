{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":87694,"status":"ok","timestamp":1745902016635,"user":{"displayName":"Seongyun Lee","userId":"17227422253819502349"},"user_tz":-540},"id":"XV0VDOMl6qbc","outputId":"b704c5ae-4ebf-4a98-ae4b-c8eccbfbc319"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n"]},{"cell_type":"code","execution_count":2,"metadata":{"executionInfo":{"elapsed":9,"status":"ok","timestamp":1745902016639,"user":{"displayName":"Seongyun Lee","userId":"17227422253819502349"},"user_tz":-540},"id":"WJCVH_Ni6q5p"},"outputs":[],"source":["# 드라이브 내의 데이터가 있는 폴더 경로 설정\n","base_path = '/content/drive/MyDrive/062.반려동물 질병 진단을 위한 영상 데이터 (근골격계)'\n"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":614,"status":"ok","timestamp":1745902017246,"user":{"displayName":"Seongyun Lee","userId":"17227422253819502349"},"user_tz":-540},"id":"dF99AqPY68yQ","outputId":"3233a952-bbb0-46e2-a85c-96757dfdbbc4"},"outputs":[{"output_type":"stream","name":"stdout","text":["['Colab Notebooks', 'Untitled0.ipynb', 'Untitled (1)', 'Untitled1.ipynb', 'Untitled2.ipynb', 'Untitled3.ipynb', 'OTg6QzA_activities.csv', 'chapter 8 사례1 데이터를 시각화해 보기.ipynb', 'numpy', 'git test', 'pandas', 'data', 'lsy', '메모장', 'numpy1', 'from_scratch', 'git_test', 'practice', 'archive.ics.uci.edu', '자료', '스크린샷', 'Untitled4.ipynb', 'Untitled5.ipynb', 'Untitled6.ipynb', 'Untitled7.ipynb', 'Untitled8.ipynb', '4.py', 'baseline_submission.csv', '스크린샷 2025-03-22 160409.png', '1.py', 'Untitled9.ipynb', '250325_이성윤_keggl-titanic.ipynb', '.ipynb', '1 (6).ipynb', '1 (5).ipynb', '1 (4).ipynb', '1 (3).ipynb', '1 (2).ipynb', '1 (1).ipynb', '1.ipynb', 'bike_250328_이성윤.ipynb', 'Untitled10.ipynb', '새 폴더', '자료 및 메모장', '250326', '새 폴더 (4)', '새 폴더 (3)', '새 폴더 (5)', '새 폴더 (2)', '새 폴더 (6)', '250401', '새 폴더 (7)', '새 폴더 (1)', '새 폴더 (8)', '새 폴더 (9)', '새 폴더 (10)', '새 폴더 (11)', '퀴즈 (2).zip', '퀴즈 (1).zip', '퀴즈.zip', 'DL1-practice', '수업 다운로드한 파일', '수업 자료 및 실습', '퀴즈 답', '퀴즈', '새 폴더 (13)', '새 폴더 (12)', 'archive', 'Untitled11.ipynb', 'Untitled12.ipynb', '이성윤_artist_cls_keras_quiz.ipynb', 'artist_cls_keras_quiz.ipynb', 'artist_prediction.csv', '250418', '250418.zip', 'Untitled13.ipynb', 'open(돌).zip', 'extracted', 'clustering_results.csv', 'rock_classification_model_clustered_resnet50.pth', 'submission6.csv', 'Untitled14.ipynb', 'Untitled15.ipynb', 'Untitled16.ipynb', '062.반려동물 질병 진단을 위한 영상 데이터 (근골격계)', '52.군 경계 작전 환경 합성데이터', 'Untitled17.ipynb', 'dataset', 'Untitled', '52.군 경계 작전 환경 합성데이터 (1)', '52.군 경계 작전 환경 합성데이터.zip', 'Untitled18.ipynb', '062.반려동물 질병 진단을 위한 영상 데이터 (근골격계) YOLO 사용 .ipynb']\n"]}],"source":["# 드라이브 내 경로 탐색\n","import os\n","print(os.listdir('/content/drive/MyDrive/'))\n"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":275,"status":"ok","timestamp":1745902017522,"user":{"displayName":"Seongyun Lee","userId":"17227422253819502349"},"user_tz":-540},"id":"9mu5ouVW7Gf-","outputId":"243b8ce7-9695-4c20-a6fa-f23696564784"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["['01.데이터', 'train']"]},"metadata":{},"execution_count":4}],"source":["# 드라이브 내 정확한 경로 출력\n","base_path = '/content/drive/MyDrive/062.반려동물 질병 진단을 위한 영상 데이터 (근골격계)'\n","os.listdir(base_path)  # 여기서 폴더가 정확히 있는지 확인\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LZQ12_tL-lyU","outputId":"80c4daea-c292-49c6-a9e4-8dbfe75631e5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["# 1. 드라이브 마운트\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","# 2. 필요한 라이브러리 import\n","import zipfile\n","import os\n","\n","# 3. 압축 해제 함수\n","def unzip_file(zip_path, extract_to):\n","    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n","        zip_ref.extractall(extract_to)\n","    print(f\"✅ 압축 해제 완료: {zip_path}\")\n","\n","# 4. 경로 설정\n","base_path = '/content/drive/MyDrive/062.반려동물 질병 진단을 위한 영상 데이터 (근골격계)'\n","\n","# Training 라벨링 데이터 경로\n","train_label_folder = os.path.join(base_path, '01.데이터/Training/라벨링데이터')\n","train_label_extract_folder = os.path.join(base_path, '01.데이터/Training/라벨링데이터_extracted')\n","\n","# Training 원천 데이터 경로\n","train_origin_folder = os.path.join(base_path, '01.데이터/Training/원천데이터')\n","\n","# Validation 라벨링 데이터 경로\n","val_label_folder = os.path.join(base_path, '01.데이터/Validation/라벨링데이터')\n","\n","# Validation 원천 데이터 경로\n","val_origin_folder = os.path.join(base_path, '01.데이터/Validation/원천데이터')\n","\n","# 5. Training - 라벨링데이터 압축 해제\n","os.makedirs(train_label_extract_folder, exist_ok=True)\n","unzip_file(os.path.join(train_label_folder, 'TL1_CAT.zip'), train_label_extract_folder)\n","unzip_file(os.path.join(train_label_folder, 'TL2_DOG.zip'), train_label_extract_folder)\n","\n","# 6. Training - 원천데이터 압축 해제\n","unzip_file(os.path.join(train_origin_folder, 'TS1_CAT.zip'), train_origin_folder)\n","unzip_file(os.path.join(train_origin_folder, 'TS2_DOG.zip'), train_origin_folder)\n","\n","# 7. Validation - 라벨링데이터 압축 해제\n","unzip_file(os.path.join(val_label_folder, 'VL1_CAT.zip'), val_label_folder)\n","unzip_file(os.path.join(val_label_folder, 'VL2_DOG.zip'), val_label_folder)\n","\n","# 8. Validation - 원천데이터 압축 해제\n","unzip_file(os.path.join(val_origin_folder, 'VS1_CAT.zip'), val_origin_folder)\n","unzip_file(os.path.join(val_origin_folder, 'VS2_DOG.zip'), val_origin_folder)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"id":"gum-P-PeC4bD","executionInfo":{"status":"aborted","timestamp":1745902142997,"user_tz":-540,"elapsed":214304,"user":{"displayName":"Seongyun Lee","userId":"17227422253819502349"}}},"outputs":[],"source":["# 1. 필요한 라이브러리 import\n","import os\n","import json\n","from PIL import Image\n","\n","# 2. 기본 경로 설정\n","base_path = '/content/drive/MyDrive/062.반려동물 질병 진단을 위한 영상 데이터 (근골격계)'\n","\n","# 3. 경로 세팅\n","sets = {\n","    'train': {\n","        'json_folder': os.path.join(base_path, \"01.데이터/Training/라벨링데이터_extracted\"),  # ★ 압축 푼 라벨 경로 주의!\n","        'image_folder': os.path.join(base_path, \"01.데이터/Training/원천데이터\"),\n","        'output_folder': os.path.join(base_path, \"01.데이터/Training/labels\")\n","    },\n","    'val': {\n","        'json_folder': os.path.join(base_path, \"01.데이터/Validation/라벨링데이터\"),  # Validation은 별도 압축 안 했으면 원래 경로\n","        'image_folder': os.path.join(base_path, \"01.데이터/Validation/원천데이터\"),\n","        'output_folder': os.path.join(base_path, \"01.데이터/Validation/labels\")\n","    }\n","}\n","\n","# 4. 지원하는 이미지 확장자\n","image_exts = ['.jpg', '.jpeg', '.png']\n","\n","# 5. 변환 함수 정의\n","def convert_to_yolo(json_folder, image_folder, output_folder):\n","    os.makedirs(output_folder, exist_ok=True)\n","\n","    for file in os.listdir(json_folder):\n","        if file.endswith('.json'):\n","            base_name = os.path.splitext(file)[0]\n","            json_path = os.path.join(json_folder, file)\n","            print(f\"🚧 현재 처리 중인 JSON 파일: {json_path}\")  # 추가된 코드\n","\n","            # JSON 로드\n","            try:\n","                with open(json_path, 'r', encoding='utf-8') as f:\n","                    data = json.load(f)\n","            except json.JSONDecodeError as e:\n","                print(f\"❌ JSON 디코드 에러 발생: {json_path} - {e}\")\n","                continue  # 오류 발생 시 다음 파일로 건너뛰기\n","\n","            # 이미지 찾기\n","            image_path = None\n","            for ext in image_exts:\n","                candidate = os.path.join(image_folder, base_name + ext)\n","                if os.path.exists(candidate):\n","                    image_path = candidate\n","                    break\n","\n","            if not image_path:\n","                print(f\"⚠️ 이미지 없음: {base_name}\")\n","                continue\n","\n","            # 이미지 크기 얻기\n","            with Image.open(image_path) as img:\n","                img_width, img_height = img.size\n","\n","            # YOLO 포맷 만들기\n","            yolo_lines = []\n","            for ann in data.get(\"annotations\", []):\n","                if ann.get(\"shape\") == \"Bounding Box\":\n","                    (x1, y1), (x2, y2) = ann[\"points\"]\n","                    cx = (x1 + x2) / 2 / img_width\n","                    cy = (y1 + y2) / 2 / img_height\n","                    w = abs(x2 - x1) / img_width\n","                    h = abs(y2 - y1) / img_height\n","                    yolo_lines.append(f\"0 {cx:.6f} {cy:.6f} {w:.6f} {h:.6f}\")\n","\n","            # 저장\n","            out_path = os.path.join(output_folder, base_name + \".txt\")\n","            with open(out_path, \"w\", encoding='utf-8') as f:\n","                f.write(\"\\n\".join(yolo_lines))\n","\n","            print(f\"✅ 변환 완료: {base_name}.txt\")\n","\n","# 6. 변환 실행\n","for phase, paths in sets.items():\n","    print(f\"\\n📂 처리 시작: {phase}\")\n","    convert_to_yolo(paths['json_folder'], paths['image_folder'], paths['output_folder'])\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wVJnguVhDNAc"},"outputs":[],"source":["# 1. train/val 이미지 경로 정리\n","def make_dataset_txt(image_folder, save_txt_path):\n","    # 지원하는 이미지 확장자\n","    image_exts = ['.jpg', '.jpeg', '.png']\n","\n","    img_paths = []\n","    for file in os.listdir(image_folder):\n","        if any(file.endswith(ext) for ext in image_exts):\n","            full_path = os.path.join(image_folder, file)\n","            img_paths.append(full_path)\n","\n","    img_paths.sort()  # (선택) 알파벳 순으로 정렬\n","    print(f\"✅ 총 {len(img_paths)}개 파일 기록: {save_txt_path}\")\n","\n","    # txt로 저장\n","    with open(save_txt_path, 'w') as f:\n","        for path in img_paths:\n","            f.write(path + '\\n')\n","\n","# 2. 경로 설정\n","train_image_folder = '/content/drive/MyDrive/062.반려동물 질병 진단을 위한 영상 데이터 (근골격계)/01.데이터/Training/원천데이터'\n","val_image_folder = '/content/drive/MyDrive/062.반려동물 질병 진단을 위한 영상 데이터 (근골격계)/01.데이터/Validation/원천데이터'\n","\n","# 저장할 txt 경로\n","train_txt_path = '/content/drive/MyDrive/062.반려동물 질병 진단을 위한 영상 데이터 (근골격계)/train.txt'\n","val_txt_path = '/content/drive/MyDrive/062.반려동물 질병 진단을 위한 영상 데이터 (근골격계)/val.txt'\n","\n","# 3. 실행\n","make_dataset_txt(train_image_folder, train_txt_path)\n","make_dataset_txt(val_image_folder, val_txt_path)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rwV-gykHDao3"},"outputs":[],"source":["import yaml\n","\n","# 1. YAML 파일을 생성할 데이터 설정\n","yaml_data = {\n","    'train': {\n","        'image_folder': train_image_folder,\n","        'label_folder': '/content/drive/MyDrive/062.반려동물 질병 진단을 위한 영상 데이터 (근골격계)/01.데이터/Training/labels',\n","        'dataset_txt': train_txt_path\n","    },\n","    'val': {\n","        'image_folder': val_image_folder,\n","        'label_folder': '/content/drive/MyDrive/062.반려동물 질병 진단을 위한 영상 데이터 (근골격계)/01.데이터/Validation/labels',\n","        'dataset_txt': val_txt_path\n","    }\n","}\n","\n","# 2. YAML 파일 경로 설정\n","yaml_file_path = '/content/drive/MyDrive/062.반려동물 질병 진단을 위한 영상 데이터 (근골격계)/dataset_config.yaml'\n","\n","# 3. YAML 파일 생성\n","with open(yaml_file_path, 'w') as yaml_file:\n","    yaml.dump(yaml_data, yaml_file, default_flow_style=False, allow_unicode=True)\n","\n","print(f\"✅ YAML 파일 생성 완료: {yaml_file_path}\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VAW1Y5W8EAuK"},"outputs":[],"source":["import cv2\n","import numpy as np\n","from matplotlib import pyplot as plt\n","\n","# 1. YOLO 모델 파일 경로\n","weights_path = '/path/to/yolov5/weights/file.pt'\n","config_path = '/path/to/yolov5/config/file.cfg'\n","class_names = ['class1', 'class2', 'class3']  # 다친 부위를 포함한 클래스 이름\n","\n","# 2. YOLO 모델 로드 (PyTorch 모델 예시)\n","import torch\n","\n","# YOLOv5 모델 로드 (PyTorch Hub 사용)\n","model = torch.hub.load('ultralytics/yolov5', 'custom', path=weights_path)\n","\n","# 3. 이미지 로드\n","image_path = '/path/to/image.jpg'\n","image = cv2.imread(image_path)\n","\n","# 4. YOLO 모델로 예측\n","results = model(image)\n","\n","# 5. 결과에서 다친 부위 (예: 'injury' 클래스)를 찾고 이미지에 표시\n","# 예시: 특정 클래스 ID로 결과를 필터링\n","for result in results.xyxy[0]:  # 결과에서 bounding box\n","    x1, y1, x2, y2, conf, cls = result[:6]\n","    label = class_names[int(cls)]\n","\n","    # 다친 부위로 인식된 경우 (예: 'injury' 클래스)\n","    if label == 'injury':  # 'injury'는 다친 부위에 해당하는 클래스\n","        # Bounding box 그리기\n","        color = (255, 0, 0)  # 빨간색 박스\n","        cv2.rectangle(image, (int(x1), int(y1)), (int(x2), int(y2)), color, 2)\n","        cv2.putText(image, label, (int(x1), int(y1)-10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, color, 2)\n","\n","# 6. 결과 이미지 출력\n","plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n","plt.show()\n"]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[],"authorship_tag":"ABX9TyOt1Hu0r8VHFHcjyQd6stDa"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}